datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
  @@map("accounts")
}


model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  username      String    @unique
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  password      String
  name          String
  role          String    @default("DRIVER")
  image         String?
  isActive      Boolean?   @default(true)

  lastLogin  DateTime?

  loginCount Int?       @default(0)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime?  @updatedAt

  accounts      Account[]
  sessions      Session[]
  inspections   Inspection[]
  vehicleKey vehicleKey[]
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Vehicle {
  id           String       @id @default(cuid())
  make         String?
  model        String?
  year         String?
  eixo         String
  plate String      @unique
  inspections  Inspection[]

  createdAt  DateTime  @default(now())
  updatedAt  DateTime?  @updatedAt

  vehicleKey vehicleKey[]
}

model vehicleKey {
  id           String       @id @default(cuid())
  userId       String
  vehicleId    String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime?  @updatedAt

  user          User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  vehicle      Vehicle @relation(fields: [vehicleId], references: [id], onDelete: Cascade)
}

model Inspection {
  id                               String   @id @default(cuid())
  userId                           String
  vehicleId                        String
  vehicleKey                       String?

  dataInspecao                     DateTime?  @default(now())
  status                           String?

  crlvEmDia                        String?
  certificadoTacografoEmDia        String?
  nivelAgua                        String?
  nivelOleo                        String?

  eixo                             String?
  dianteira                        String?
  descricaoDianteira               String?
  tracao                           String?
  descricaoTracao                  String?
  truck                            String?
  descricaoTruck                   String?
  quartoEixo                       String?
  descricaoQuartoEixo              String?

  avariasCabine                    String?
  descricaoAvariasCabine           String?
  bauPossuiAvarias                 String?
  descricaoAvariasBau              String?
  funcionamentoParteEletrica       String?
  descricaoParteEletrica           String?

  fotoVeiculo                      String?   @db.LongText

  isFinished   Boolean?   @default(false)

  createdAt  DateTime  @default(now())
  updatedAt  DateTime?  @updatedAt

  user       User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  vehicle    Vehicle @relation(fields: [vehicleId], references: [id], onDelete: Cascade)
}
